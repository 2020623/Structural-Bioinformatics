################################################################################
# Libraries and modules used
import sys
import csv
import re
import os
import numpy  as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy
import math
import scipy.spatial.distance as ssd
from sklearn import cluster, metrics
from time import time
from scipy import signal
from scipy.cluster.hierarchy import dendrogram, linkage
from Bio.PDB import PDBList
from Bio.PDB.PDBParser import PDBParser
################################################################################
# This function receives in input the path to the PDB file and returns in output the list of residues in the protein.
def residues_from_pdb(pdb_path)
################################################################################
# This function receives in input the path to the directory containing the EDGES files and returns in output a list containing the names of the files inside the directory.
def edges_filenames(path)
################################################################################
# This function receives in input:
# - list containg the names of the files in EDGES directory;
# - path to the EDGES directory;
# This function returns in output a list of dataframes containing the information present in every edges file. The feature of this function is that it is able 
# to modify the residual name so as not to fall into possible errors present in the residuas names.
def edges_file_saving(filenames_list, path) 
################################################################################
# This function receives in input a list of dataframes containing the information present in every edges file and returns in output a dictionary whose keys 
# are represented by the types of interactions detected within the trajectory and as values the total number of bonds present within the trajectory, for that 
# type of interaction.
def interaction(edges_list) 
################################################################################
# This function receives in input:
# - a dictionary with the interactions list;
# - a residues list involved in the trajectory;
# This function returns in output the weight, so the importance assigned to every interaction, following the tf-idf function.
def weight(interactions_list, N)
################################################################################
# This function receives in input:
# - an edges dataframe;
# - a residues list involved in the trajectory;
# - only type of interaction involved in the trajectory
# This function returns in output the contact map associated to the edges file for that type of interaction
def split(edges, residues, interaction)

# This function returns in output a list of contact maps, one for each type for every interaction, for only one edges dataframe
def contact(edges, residues, interaction)

# This function returns in output a list of contact maps calculated along every edges dataframe
def contact_saving(edges_list, residues, interaction)

# This function returns in output a distance matrix associated with that type of interaction and that particular contact maps list
def distance_split_contact(contacts_list, interaction)
################################################################################
# This function recevies in input:
# - a distance matrix;
# - a "linked" object;
# This function returns in output the optimal number of clusters obtained from the search of the maximum of the silhouette value.
def opt_n_clust(dmat, linked)
################################################################################
# This function receives in input:
# - a distance matrix;
# - a "linked" object;
# - the optimal number of cluster.
# This function returns in output:
# - a list of labels containing the cluster to which each snapshot has been assigned a list of labels; 
# - a list containing the most important snapshot for every cluster. A snapshot is considered the most important within its cluster if it is the one that reaches 
# the maximum silhouette value, that is the snapshot that has been best classified and therefore the most representative         
def most_important_snapshot(dmat, linked, k)
################################################################################
# This function receives in input:
# - a list containing the most important snapshot;
# - a list of dataframes containing the information present in every edges file;
# This function returns in output a dataframe containing the relevant interaction from a cluster to another based on the most important snapshot.
def relevant_interaction(snapshot, edges_list)
################################################################################
# This function receives in input:
# - a distance matrix;
# - a list containing the most important snapshot.
# This function returns in output a dataframe containing:
# - the labels for the cluster to which the snapshot was assigned;
# - whether the cluster is representative (= 1) or not (= 0), one for each cluster;
# - the normalized distance of each snasphot from the representative one, obtained from the distance matrix.
def output_info(matrix, representative_list)
################################################################################



















